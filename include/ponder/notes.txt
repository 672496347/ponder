

struct Foo
{
    int i;
    float a[8];

    int* pi;
    std::shared_ptr<int> si;
};

                                AccessType              DataType

int(Foo::*)                     int                     int
float(Foo::*)[8]                float[8]                float

int*(Foo::*)                    int*                    int
std::shared_ptr<int>(Foo::*)    std::shared_ptr<int>    int


API

template <typename T>
typename detail::ReferenceTraits<T>::ReferenceType UserObject::get() const;

template <typename A>
Value SimplePropertyImpl<A>::getValue(const UserObject& object) const
{
    return m_accessor.get(object.get<typename A::ClassType>());
}

template <typename A>
void SimplePropertyImpl<A>::setValue(const UserObject& object, const Value& value) const
{
    if (!m_accessor.set(object.get<typename A::ClassType>(), value.to<typename A::AccessType>()))
        PONDER_ERROR(ForbiddenWrite(name()));
}

